

public class ProxyPattern
{
	    public static void main(String[] args) 
	    {
	        Image image1 = new ProxyImage("NaturePhoto1.jpg");
	        Image image2 = new ProxyImage("NaturePhoto2.jpg");

	        System.out.println("First time loading image1:");
	        image1.display();

	        System.out.println("\nFirst time loading image2:");
	        image2.display();

	        System.out.println("\nDisplaying image1 again (from cache):");
	        image1.display();
	    }
	}

	interface Image {
	    void display();
	}

	class RealImage implements Image {
	    private String filename;

	    public RealImage(String filename) {
	        this.filename = filename;
	        loadFromServer();
	    }

	    private void loadFromServer() {
	        System.out.println("Loading image from remote server: " + filename);
	    }

	    @Override
	    public void display() {
	        System.out.println("Displaying image: " + filename);
	    }
	}

	class ProxyImage implements Image {
	    private RealImage realImage;
	    private String filename;

	    public ProxyImage(String filename) {
	        this.filename = filename;
	    }

	    @Override
	    public void display() {
	        if (realImage == null) {
	            realImage = new RealImage(filename);
	        } else {
	            System.out.println("Loaded from cache: " + filename);
	        }
	        realImage.display();
	    }
	}


Output:

First time loading image1:
Loading image from remote server: NaturePhoto1.jpg
Displaying image: NaturePhoto1.jpg

First time loading image2:
Loading image from remote server: NaturePhoto2.jpg
Displaying image: NaturePhoto2.jpg

Displaying image1 again (from cache):
Loaded from cache: NaturePhoto1.jpg
Displaying image: NaturePhoto1.jpg
